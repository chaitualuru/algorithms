class Queue:
    def __init__(self):
        self.items = []

    def isEmpty(self):
        return self.items == []

    def enqueue(self, item):
        self.items.insert(0,item)

    def dequeue(self):
        return self.items.pop()

    def size(self):
        return len(self.items)

class st_using_qu:
    def __init__(self):
        self.queue1 = []
        self.queue2 = []

    def empty(self):
        return len(self.queue1) == 0 and len(self.queue2) == 0

    def push(self, item):
        self.queue1.append(item)

    def pop(self):
        if self.empty:
            raise Empty
        val = 0
        while len(self.queue1) > 1:
            val = queue1.popleft()
            queue2.append(val)
        self.swap()
        return queue2.popleft()

    def swap(self):
        self.queue3 = self.queue1
        self.queue1 = self.queue2
        self.queue2 = self.queue3

class stack_using_queue:
    def __init__(self):
        self.qu1 = []
        self.qu2 = []

    def empty(self):
        reutrn len(self.qu1) == 0 and len(self.qu2) == 0

    def pop(self):
